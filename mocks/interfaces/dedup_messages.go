// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/dedup_messages.go
//
// Generated by this command:
//
//	mockgen -source=interfaces/dedup_messages.go -destination=mocks/interfaces/dedup_messages.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDedup is a mock of Dedup interface.
type MockDedup struct {
	ctrl     *gomock.Controller
	recorder *MockDedupMockRecorder
}

// MockDedupMockRecorder is the mock recorder for MockDedup.
type MockDedupMockRecorder struct {
	mock *MockDedup
}

// NewMockDedup creates a new mock instance.
func NewMockDedup(ctrl *gomock.Controller) *MockDedup {
	mock := &MockDedup{ctrl: ctrl}
	mock.recorder = &MockDedupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDedup) EXPECT() *MockDedupMockRecorder {
	return m.recorder
}

// IsUnique mocks base method.
func (m *MockDedup) IsUnique(ctx context.Context, device, msg, game, platform string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUnique", ctx, device, msg, game, platform)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnique indicates an expected call of IsUnique.
func (mr *MockDedupMockRecorder) IsUnique(ctx, device, msg, game, platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnique", reflect.TypeOf((*MockDedup)(nil).IsUnique), ctx, device, msg, game, platform)
}
