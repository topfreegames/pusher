// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/message_handler.go
//
// Generated by this command:
//
//	mockgen -source=interfaces/message_handler.go -destination=mocks/interfaces/message_handler.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/topfreegames/pusher/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// CleanMetadataCache mocks base method.
func (m *MockMessageHandler) CleanMetadataCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanMetadataCache")
}

// CleanMetadataCache indicates an expected call of CleanMetadataCache.
func (mr *MockMessageHandlerMockRecorder) CleanMetadataCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanMetadataCache", reflect.TypeOf((*MockMessageHandler)(nil).CleanMetadataCache))
}

// HandleMessages mocks base method.
func (m *MockMessageHandler) HandleMessages(ctx context.Context, msg interfaces.KafkaMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessages", ctx, msg)
}

// HandleMessages indicates an expected call of HandleMessages.
func (mr *MockMessageHandlerMockRecorder) HandleMessages(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessages", reflect.TypeOf((*MockMessageHandler)(nil).HandleMessages), ctx, msg)
}

// HandleResponses mocks base method.
func (m *MockMessageHandler) HandleResponses() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleResponses")
}

// HandleResponses indicates an expected call of HandleResponses.
func (mr *MockMessageHandlerMockRecorder) HandleResponses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleResponses", reflect.TypeOf((*MockMessageHandler)(nil).HandleResponses))
}
