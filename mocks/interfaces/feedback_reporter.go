// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/feedback_reporter.go
//
// Generated by this command:
//
//	mockgen -source=interfaces/feedback_reporter.go -destination=mocks/interfaces/feedback_reporter.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeedbackReporter is a mock of FeedbackReporter interface.
type MockFeedbackReporter struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackReporterMockRecorder
}

// MockFeedbackReporterMockRecorder is the mock recorder for MockFeedbackReporter.
type MockFeedbackReporterMockRecorder struct {
	mock *MockFeedbackReporter
}

// NewMockFeedbackReporter creates a new mock instance.
func NewMockFeedbackReporter(ctrl *gomock.Controller) *MockFeedbackReporter {
	mock := &MockFeedbackReporter{ctrl: ctrl}
	mock.recorder = &MockFeedbackReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackReporter) EXPECT() *MockFeedbackReporterMockRecorder {
	return m.recorder
}

// SendFeedback mocks base method.
func (m *MockFeedbackReporter) SendFeedback(game, platform string, feedback []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendFeedback", game, platform, feedback)
}

// SendFeedback indicates an expected call of SendFeedback.
func (mr *MockFeedbackReporterMockRecorder) SendFeedback(game, platform, feedback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFeedback", reflect.TypeOf((*MockFeedbackReporter)(nil).SendFeedback), game, platform, feedback)
}
