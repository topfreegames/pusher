// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/stats_reporter.go
//
// Generated by this command:
//
//	mockgen -source=interfaces/stats_reporter.go -destination=mocks/interfaces/stats_reporter.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"
	time "time"

	errors "github.com/topfreegames/pusher/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockStatsReporter is a mock of StatsReporter interface.
type MockStatsReporter struct {
	ctrl     *gomock.Controller
	recorder *MockStatsReporterMockRecorder
}

// MockStatsReporterMockRecorder is the mock recorder for MockStatsReporter.
type MockStatsReporterMockRecorder struct {
	mock *MockStatsReporter
}

// NewMockStatsReporter creates a new mock instance.
func NewMockStatsReporter(ctrl *gomock.Controller) *MockStatsReporter {
	mock := &MockStatsReporter{ctrl: ctrl}
	mock.recorder = &MockStatsReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsReporter) EXPECT() *MockStatsReporterMockRecorder {
	return m.recorder
}

// HandleNotificationFailure mocks base method.
func (m *MockStatsReporter) HandleNotificationFailure(game, platform string, err *errors.PushError) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleNotificationFailure", game, platform, err)
}

// HandleNotificationFailure indicates an expected call of HandleNotificationFailure.
func (mr *MockStatsReporterMockRecorder) HandleNotificationFailure(game, platform, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNotificationFailure", reflect.TypeOf((*MockStatsReporter)(nil).HandleNotificationFailure), game, platform, err)
}

// HandleNotificationSent mocks base method.
func (m *MockStatsReporter) HandleNotificationSent(game, platform string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleNotificationSent", game, platform)
}

// HandleNotificationSent indicates an expected call of HandleNotificationSent.
func (mr *MockStatsReporterMockRecorder) HandleNotificationSent(game, platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNotificationSent", reflect.TypeOf((*MockStatsReporter)(nil).HandleNotificationSent), game, platform)
}

// HandleNotificationSuccess mocks base method.
func (m *MockStatsReporter) HandleNotificationSuccess(game, platform string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleNotificationSuccess", game, platform)
}

// HandleNotificationSuccess indicates an expected call of HandleNotificationSuccess.
func (mr *MockStatsReporterMockRecorder) HandleNotificationSuccess(game, platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNotificationSuccess", reflect.TypeOf((*MockStatsReporter)(nil).HandleNotificationSuccess), game, platform)
}

// InitializeFailure mocks base method.
func (m *MockStatsReporter) InitializeFailure(game, platform string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitializeFailure", game, platform)
}

// InitializeFailure indicates an expected call of InitializeFailure.
func (mr *MockStatsReporterMockRecorder) InitializeFailure(game, platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeFailure", reflect.TypeOf((*MockStatsReporter)(nil).InitializeFailure), game, platform)
}

// NotificationRateLimitFailed mocks base method.
func (m *MockStatsReporter) NotificationRateLimitFailed(game, platform string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotificationRateLimitFailed", game, platform)
}

// NotificationRateLimitFailed indicates an expected call of NotificationRateLimitFailed.
func (mr *MockStatsReporterMockRecorder) NotificationRateLimitFailed(game, platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationRateLimitFailed", reflect.TypeOf((*MockStatsReporter)(nil).NotificationRateLimitFailed), game, platform)
}

// NotificationRateLimitReached mocks base method.
func (m *MockStatsReporter) NotificationRateLimitReached(game, platform string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotificationRateLimitReached", game, platform)
}

// NotificationRateLimitReached indicates an expected call of NotificationRateLimitReached.
func (mr *MockStatsReporterMockRecorder) NotificationRateLimitReached(game, platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationRateLimitReached", reflect.TypeOf((*MockStatsReporter)(nil).NotificationRateLimitReached), game, platform)
}

// ReportFirebaseLatency mocks base method.
func (m *MockStatsReporter) ReportFirebaseLatency(latencyMs time.Duration, game string, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []any{latencyMs, game}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReportFirebaseLatency", varargs...)
}

// ReportFirebaseLatency indicates an expected call of ReportFirebaseLatency.
func (mr *MockStatsReporterMockRecorder) ReportFirebaseLatency(latencyMs, game any, labels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{latencyMs, game}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportFirebaseLatency", reflect.TypeOf((*MockStatsReporter)(nil).ReportFirebaseLatency), varargs...)
}

// ReportGoStats mocks base method.
func (m *MockStatsReporter) ReportGoStats(numGoRoutines int, allocatedAndNotFreed, heapObjects, nextGCBytes, pauseGCNano uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportGoStats", numGoRoutines, allocatedAndNotFreed, heapObjects, nextGCBytes, pauseGCNano)
}

// ReportGoStats indicates an expected call of ReportGoStats.
func (mr *MockStatsReporterMockRecorder) ReportGoStats(numGoRoutines, allocatedAndNotFreed, heapObjects, nextGCBytes, pauseGCNano any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportGoStats", reflect.TypeOf((*MockStatsReporter)(nil).ReportGoStats), numGoRoutines, allocatedAndNotFreed, heapObjects, nextGCBytes, pauseGCNano)
}

// ReportMetricCount mocks base method.
func (m *MockStatsReporter) ReportMetricCount(metric string, value int64, game, platform string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportMetricCount", metric, value, game, platform)
}

// ReportMetricCount indicates an expected call of ReportMetricCount.
func (mr *MockStatsReporterMockRecorder) ReportMetricCount(metric, value, game, platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportMetricCount", reflect.TypeOf((*MockStatsReporter)(nil).ReportMetricCount), metric, value, game, platform)
}

// ReportMetricGauge mocks base method.
func (m *MockStatsReporter) ReportMetricGauge(metric string, value float64, game, platform string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportMetricGauge", metric, value, game, platform)
}

// ReportMetricGauge indicates an expected call of ReportMetricGauge.
func (mr *MockStatsReporterMockRecorder) ReportMetricGauge(metric, value, game, platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportMetricGauge", reflect.TypeOf((*MockStatsReporter)(nil).ReportMetricGauge), metric, value, game, platform)
}

// ReportSendNotificationLatency mocks base method.
func (m *MockStatsReporter) ReportSendNotificationLatency(latencyMs time.Duration, game, platform string, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []any{latencyMs, game, platform}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReportSendNotificationLatency", varargs...)
}

// ReportSendNotificationLatency indicates an expected call of ReportSendNotificationLatency.
func (mr *MockStatsReporterMockRecorder) ReportSendNotificationLatency(latencyMs, game, platform any, labels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{latencyMs, game, platform}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSendNotificationLatency", reflect.TypeOf((*MockStatsReporter)(nil).ReportSendNotificationLatency), varargs...)
}
