// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/apns.go
//
// Generated by this command:
//
//	mockgen -source=interfaces/apns.go -destination=mocks/interfaces/apns.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	structs "github.com/topfreegames/pusher/structs"
	gomock "go.uber.org/mock/gomock"
)

// MockAPNSPushQueue is a mock of APNSPushQueue interface.
type MockAPNSPushQueue struct {
	ctrl     *gomock.Controller
	recorder *MockAPNSPushQueueMockRecorder
}

// MockAPNSPushQueueMockRecorder is the mock recorder for MockAPNSPushQueue.
type MockAPNSPushQueueMockRecorder struct {
	mock *MockAPNSPushQueue
}

// NewMockAPNSPushQueue creates a new mock instance.
func NewMockAPNSPushQueue(ctrl *gomock.Controller) *MockAPNSPushQueue {
	mock := &MockAPNSPushQueue{ctrl: ctrl}
	mock.recorder = &MockAPNSPushQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPNSPushQueue) EXPECT() *MockAPNSPushQueueMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAPNSPushQueue) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAPNSPushQueueMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAPNSPushQueue)(nil).Close))
}

// Configure mocks base method.
func (m *MockAPNSPushQueue) Configure() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure")
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockAPNSPushQueueMockRecorder) Configure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockAPNSPushQueue)(nil).Configure))
}

// Push mocks base method.
func (m *MockAPNSPushQueue) Push(notification *structs.ApnsNotification) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", notification)
}

// Push indicates an expected call of Push.
func (mr *MockAPNSPushQueueMockRecorder) Push(notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockAPNSPushQueue)(nil).Push), notification)
}

// ResponseChannel mocks base method.
func (m *MockAPNSPushQueue) ResponseChannel() chan *structs.ResponseWithMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseChannel")
	ret0, _ := ret[0].(chan *structs.ResponseWithMetadata)
	return ret0
}

// ResponseChannel indicates an expected call of ResponseChannel.
func (mr *MockAPNSPushQueueMockRecorder) ResponseChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseChannel", reflect.TypeOf((*MockAPNSPushQueue)(nil).ResponseChannel))
}
