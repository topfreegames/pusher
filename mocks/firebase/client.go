// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/client.go
//
// Generated by this command:
//
//	mockgen -source=interfaces/client.go -destination=mocks/firebase/client.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/topfreegames/pusher/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockPushClient is a mock of PushClient interface.
type MockPushClient struct {
	ctrl     *gomock.Controller
	recorder *MockPushClientMockRecorder
}

// MockPushClientMockRecorder is the mock recorder for MockPushClient.
type MockPushClientMockRecorder struct {
	mock *MockPushClient
}

// NewMockPushClient creates a new mock instance.
func NewMockPushClient(ctrl *gomock.Controller) *MockPushClient {
	mock := &MockPushClient{ctrl: ctrl}
	mock.recorder = &MockPushClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushClient) EXPECT() *MockPushClientMockRecorder {
	return m.recorder
}

// SendPush mocks base method.
func (m *MockPushClient) SendPush(ctx context.Context, msg interfaces.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPush", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPush indicates an expected call of SendPush.
func (mr *MockPushClientMockRecorder) SendPush(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPush", reflect.TypeOf((*MockPushClient)(nil).SendPush), ctx, msg)
}
